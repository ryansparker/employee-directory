{"version":3,"sources":["components/Employee/index.js","components/EmployeeList/index.js","App.js","serviceWorker.js","index.js"],"names":["Employee","employee","src","picture","thumbnail","name","first","last","location","city","dob","date","EmployeeList","employees","searchTerm","filter","toLowerCase","includes","map","App","useState","employeeList","setEmployeeList","setSearchTerm","useEffect","fetch","then","response","json","data","results","for","onChange","event","target","value","type","id","placeholder","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"kQAaeA,MAXf,SAAkBC,GACjB,OACI,4BACI,yBAAKC,IAAKD,EAASE,QAAQC,YAC3B,oCAAUH,EAASI,KAAKC,MAAxB,IAAgCL,EAASI,KAAKE,MAC9C,oCAAUN,EAASO,SAASC,MAC5B,mCAASR,EAASS,IAAIC,QCOhBC,MAZf,YAAgD,IAAzBC,EAAwB,EAAxBA,UAAWC,EAAa,EAAbA,WAE9B,OACI,4BACKD,EAAUE,QAAO,SAACd,GAEf,OADaA,EAASI,KAAKC,MAAQ,IAAML,EAASI,KAAKE,MAC3CS,cAAcC,SAASH,EAAWE,kBAC/CE,KAAI,SAACjB,GAAD,OAAa,kBAAC,EAAaA,Q,MC2B/BkB,MA9Bf,WAAgB,IAAD,EAE2BC,mBAAS,IAFpC,mBAENC,EAFM,KAEQC,EAFR,OAGuBF,mBAAS,IAHhC,mBAGNN,EAHM,KAGMS,EAHN,KAeb,OAVAC,qBAAU,WACRC,MAAM,yCACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAIP,EAAgBO,EAAKC,cACpC,IAOD,6BACE,sDAGA,8BACE,2BAAOC,IAAI,cAAX,WACA,2BAAOC,SAXb,SAAsBC,GACpBV,EAAcU,EAAMC,OAAOC,QAUQC,KAAK,OAAOC,GAAG,aAAahC,KAAK,aAAaiC,YAAY,gBAE3F,kBAAC,EAAD,CAAczB,UAAWQ,EAAcP,WAAYA,MCnBrCyB,QACW,cAA7BC,OAAOhC,SAASiC,UAEe,UAA7BD,OAAOhC,SAASiC,UAEhBD,OAAOhC,SAASiC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,IAAMC,WAAP,KAAkB,kBAAC,EAAD,OAA4BC,SAASC,eAAe,SD6HhF,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.df89dbd7.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Employee(employee) {\n return (\n     <li>\n         <img src={employee.picture.thumbnail} />\n         <p>Name: {employee.name.first} {employee.name.last}</p>\n         <p>City: {employee.location.city}</p>\n         <p>DOB: {employee.dob.date}</p>\n     </li>\n )\n}\n\nexport default Employee","import React from 'react';\nimport Employee from '../Employee';\n\nfunction EmployeeList({employees, searchTerm}) {\n\n    return (\n        <ul>\n            {employees.filter((employee) => {\n                const name = employee.name.first + \" \" + employee.name.last\n                return name.toLowerCase().includes(searchTerm.toLowerCase())\n            }).map((employee)=> <Employee {...employee} />)}   \n        </ul>\n    )\n}\n\nexport default EmployeeList\n\n","import React, { useState, useEffect } from 'react';\nimport EmployeeList from \"./components/EmployeeList\"\nimport './App.css';\n\n\n\n\nfunction App() {\n  \n  const [employeeList, setEmployeeList] = useState([]);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n\n  useEffect(() => {\n    fetch('https://randomuser.me/api/?results=20')\n      .then(response => response.json())\n      .then(data => setEmployeeList(data.results));\n  }, []);\n  \n  function handleSearch(event) {\n    setSearchTerm(event.target.value);\n  }\n\n  return (\n    <div>\n      <header>\n        Employee Directory\n      </header>\n      <form>\n        <label for=\"searchName\">Search:</label>\n        <input onChange={handleSearch} type=\"text\" id=\"searchName\" name=\"searchName\" placeholder=\"Enter Name\"/>\n      </form>\n      <EmployeeList employees={employeeList} searchTerm={searchTerm}/>\n    </div>\n  );\n}\n\n\nexport default App;\n\n  \n// componentDidMount() {\n//  \n\n// }","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<React.StrictMode><App /></React.StrictMode>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}